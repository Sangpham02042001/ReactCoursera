[{"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\reportWebVitals.js":"1","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\index.js":"2","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\App.js":"3","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js":"4","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\dishes.js":"5","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js":"6","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\MainComponent.js":"7","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\HeaderComponent.js":"8","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\FooterComponent.js":"9","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js":"10","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js":"11","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\leaders.js":"12","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\promotions.js":"13","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\comments.js":"14","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js":"15","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\redux\\promotions.js":"16"},{"size":362,"mtime":1608454352386,"results":"17","hashOfConfig":"18"},{"size":643,"mtime":1609139988746,"results":"19","hashOfConfig":"18"},{"size":314,"mtime":1609221482078,"results":"20","hashOfConfig":"18"},{"size":1408,"mtime":1609222425628,"results":"21","hashOfConfig":"18"},{"size":1614,"mtime":1609205443151,"results":"22","hashOfConfig":"18"},{"size":6718,"mtime":1609740658576,"results":"23","hashOfConfig":"18"},{"size":2651,"mtime":1609732576516,"results":"24","hashOfConfig":"18"},{"size":5650,"mtime":1609407597827,"results":"25","hashOfConfig":"18"},{"size":2826,"mtime":1609147125522,"results":"26","hashOfConfig":"18"},{"size":1123,"mtime":1609205229672,"results":"27","hashOfConfig":"18"},{"size":10325,"mtime":1609726810637,"results":"28","hashOfConfig":"18"},{"size":2432,"mtime":1609290369813,"results":"29","hashOfConfig":"18"},{"size":457,"mtime":1609203951451,"results":"30","hashOfConfig":"18"},{"size":4926,"mtime":1609203999577,"results":"31","hashOfConfig":"18"},{"size":4389,"mtime":1609292816148,"results":"32","hashOfConfig":"18"},{"size":196,"mtime":1609813026042,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yaqa5n",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\reportWebVitals.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\index.js",[],["71","72"],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\App.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\MenuComponent.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\dishes.js",[],["73","74"],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\DishDetailComponent.js",["75","76","77"],"import React from 'react';\r\nimport {\r\n    Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal,\r\n    ModalHeader, ModalBody, Label, Row, Col\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n        }\r\n        this.renderComments = this.renderComments.bind(this);\r\n    }\r\n\r\n    renderComments() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button outline color=\"secondary\" onClick={this.renderComments}>\r\n                    <span className='fa fa-sign-in fa-lg'></span>\r\n                                Submit Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.renderComments}>\r\n                    <ModalHeader toggle={this.renderComments}>\r\n                        Submit Comment\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label sm={12} htmlFor=\"rating\">Rating</Label>\r\n                                <Col>\r\n                                    <Control.select model=\".rating\" name=\"rating\" id=\"rating\"\r\n                                        className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label sm={12} htmlFor=\"name\">Your Name</Label>\r\n                                <Col sm={12}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors className='text-danger'\r\n                                        model='.name'\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 characters or less\"\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label sm={12} htmlFor=\"comment\">Comment</Label>\r\n                                <Col sm={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction RenderDish({ dish }) {\r\n    if (dish != null) {\r\n        return (\r\n            <Card>\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle heading>{dish.name}</CardTitle>\r\n                    <CardText>\r\n                        {dish.description}\r\n                    </CardText>\r\n                </CardBody>\r\n            </Card>\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction RenderComments({ comments }) {\r\n\r\n    const commentList = comments.map((comment) => {\r\n        return (\r\n            <div key={comment.id}>\r\n                <CardText>{comment.comment}</CardText>\r\n                <CardText>-- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}</CardText>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CardTitle>\r\n                Comments\r\n            </CardTitle>\r\n            {/* <div key={comments.id}>\r\n                <CardText>{comments.comment}</CardText>\r\n                <CardText>-- {comments.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comments.date)))}</CardText>\r\n            </div> */}\r\n            <div className=\"mb-3\">\r\n                {commentList}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>{props.dish.name}</h3>\r\n                    <hr />\r\n                </div>\r\n                <div className=\"col-md-5 m-1\">\r\n                    <RenderDish dish={props.dish} />\r\n                </div>\r\n                <div className=\"col-md-5 m-1\">\r\n                    <RenderComments comments={props.comments} />\r\n                    <CommentForm />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DishDetail;","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\MainComponent.js",["78"],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\FooterComponent.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\HomeComponent.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\ContactComponent.js",["79","80","81","82","83","84","85","86","87","88"],"import React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Row, Button, Form, FormGroup, Label, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log(\"Currtend State is: \" + JSON.stringify(values));\r\n        alert(\"Currtend State is: \" + JSON.stringify(values));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/home'>Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact us </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors className='text-danger'\r\n                                        model='.firstname'\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 characters or less\"\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors className='text-danger'\r\n                                        model='.lastname'\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 characters or less\"\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors className='text-danger'\r\n                                        model='.telnum'\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: \"Must be greater than 2 numbers \\n\",\r\n                                            maxLength: \"Must be 15 numbers or less\",\r\n                                            isNumber: \"Must be a number\"\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }} />\r\n                                    <Errors className='text-danger'\r\n                                        model='.email'\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            validEmail: \"Invalid Email Address\"\r\n                                        }} />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Contact;","D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\leaders.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\promotions.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\shared\\comments.js",[],["89","90"],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\components\\AboutComponent.js",[],"D:\\FullStackLab\\Coursera\\React\\confusion\\src\\redux\\promotions.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":44,"column":37,"nodeType":"99","endLine":45,"endColumn":66},{"ruleId":"97","severity":1,"message":"100","line":56,"column":37,"nodeType":"99","endLine":62,"endColumn":39},{"ruleId":"97","severity":1,"message":"101","line":75,"column":37,"nodeType":"99","endLine":77,"endColumn":68},{"ruleId":"102","severity":1,"message":"103","line":23,"column":5,"nodeType":"104","messageId":"105","endLine":25,"endColumn":6},{"ruleId":"106","severity":1,"message":"107","line":2,"column":51,"nodeType":"108","messageId":"109","endLine":2,"endColumn":55},{"ruleId":"106","severity":1,"message":"110","line":2,"column":57,"nodeType":"108","messageId":"109","endLine":2,"endColumn":66},{"ruleId":"111","severity":1,"message":"112","line":60,"column":29,"nodeType":"99","endLine":60,"endColumn":71},{"ruleId":"97","severity":1,"message":"100","line":74,"column":37,"nodeType":"99","endLine":80,"endColumn":39},{"ruleId":"97","severity":1,"message":"100","line":93,"column":37,"nodeType":"99","endLine":99,"endColumn":39},{"ruleId":"97","severity":1,"message":"100","line":112,"column":37,"nodeType":"99","endLine":118,"endColumn":39},{"ruleId":"97","severity":1,"message":"100","line":132,"column":37,"nodeType":"99","endLine":137,"endColumn":46},{"ruleId":"97","severity":1,"message":"113","line":150,"column":45,"nodeType":"99","endLine":152,"endColumn":47},{"ruleId":"97","severity":1,"message":"98","line":158,"column":37,"nodeType":"99","endLine":159,"endColumn":66},{"ruleId":"97","severity":1,"message":"101","line":168,"column":37,"nodeType":"99","endLine":170,"endColumn":68},{"ruleId":"91","replacedBy":"114"},{"ruleId":"93","replacedBy":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],["116"],["117"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["116"],["117"],"no-global-assign","no-unsafe-negation"]